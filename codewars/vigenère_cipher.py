"""
Input: You are given the ciphertext (uppercase English letters) and the length of the key used to encrypt it.
Output: You need to determine the key (a string of uppercase letters) that was used to produce the ciphertext.
"""


def get_keyword(ciphertext, key_len):
    # print(f"text:\n{ciphertext}")
    # print(f"key length:\n{key_len}")
    let_nums = {v: k for k, v in dict(list(enumerate([i for i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']))).items()}

    cypher_list = list(ciphertext)
    counter = 0
    for i in range(0, len(list(ciphertext).copy())):
        counter += 1
        if key_len - counter == 0:
            cypher_list.insert(i + 1, '-')
            counter = 0

    # cipher_letters = [
    # 	i if len(i) == key_len
    # 	else ''.join(j for j in i) + '-' * (key_len - len(i))
    # 	for i in ''.join(cypher_list).split('-')
    # ]

    # cipher_letters = [list(i) for i in [
    # 	i if len(i) == key_len
    # 	else ''.join(j for j in i) + '-' * (key_len - len(i))
    # 	for i in ''.join(cypher_list).split('-')
    # ]]
    cipher_letters = list(zip(*[list(i) for i in [i if len(i) == key_len else ''.join(j for j in i) + '-' * (key_len - len(i)) for i in ''.join(cypher_list).split('-')]]))

    return cipher_letters


# a_key = "CODEWARS"
# a = 'NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND'
# a_ = a[:25]
# aa = 8
# aaa = get_keyword(a_, aa)

# b = 'NBPWAMXMWXTMIABPMGZMTIBMLBWBPMXZWKMMLQVOAWNOWDMZVUMVBNWZIAUCKPIABPMGSVMEBPMUIAEMTTIAQLQLBPIBBPMUMIACZMEPQKPBPMGEMZMVWBEQBVMAABWBPMILWXBQWVWNEIAVWBTMAAXIQVNCTBPIVMFXMVAQDMEIAQVKWVDMVQMVBLQABZMAAQVOQVMDMZGXWQVBWNDQMEJCBIAQKWVAQLMZMLBPMACXXWZBWNBPMTIEAIAIVWJRMKBWNBPMNQZABUIOVQBCLMIVLBPMOZMIBMABXIZBWNBPMMFXMVAMPILITZMILGJMMVQVKCZZMLBPIBVWBPQVOAPWZBWNBPMUWABCVMYCQDWKITXZWWNAWNIJAWTCBMACJUQAAQWVAPWCTLZMBIZLBPMUIZKPWNBPMIZUGQVBWBPMEMABMZVKWCVBQMAQVWZLMZBWKWVDQVKMBPMUBPIBBPMOWDMZVUMVBKWCTLEWCTLMVNWZKMWJMLQMVKMBWBPMTIEAVWBACNNMZQVOBPMUBWJMQVACTBMLEQBPQUXCVQBGJMQVOIASMLIOIQVEPIBXZWWNAEWCTLJMZMYCQZMLQIVAEMZMLBPMGSVMEIAEMTTIAQLQLEPIBEIALCMBWRCABQKMMFIUXTMBPMGCVLMZABWWLUGUMIVQVOIVLIASMLQNBPMGUQOPBPIDMIVWBPMZQVBMZDQMEQIXXWQVBMLNQDMWKTWKSQVBPMINBMZVWWVNWZQBIBBPQAAMKWVLUMMBQVOBPMZMEIATQBBTMUWZMBPIVIZMXMBQBQWVWNEPIBPILXIAAMLQVBPMNWZMVWWVIVLQBJMQVOIOIQVUMVBQWVMLBPIBITTBPMXZQVKQXITKPIZIKBMZAMFKMXBWVMQVBPMEMABMZVKWCVBQMAEPWPILJMMVQVBPMWXXWAQBQWVPILACJUQBBMLBWBPMXZWXWAQBQWVAQEIAQVLCKMLAMMQVOBPMUQVBPMABZMMB'
# bb = 1
# bbb = get_keyword(b, bb)
#
# c = 'RQHYVEZOVNCLTCFRIEVMHWGHTOHUDQKCHZMXJZRWGHKOHINKVHLEBZRTVNMLKDQXNWPGHWJUVSDDKOVDVMDVZWOPYLWAHIZQKAUFHIRPOBIHINOVOWVMEZBURHWIDJIVPNJUUAUVLXVIFZZVNJUUGHEBWYVQUNHEOHEXHCZQXOKTVQSZFRGFLGDKZGWJUJKHTDIZXDLOKFMVRIGLNHUORGMRMZRIYLJKUFQHRPWYJUJCLGJIKZAKNHMZQWJURPWYJUJRKFNHJOBCZVRMHEJWJJGZQHIBHEODTXXIVWVVYVMDXZOVOWVMIIZTLZQTDHJXDEJQCTEVBOVVQVYEPVQRGBQDQXVORMJVVPFPQKJIIZSIZVVIWROLMZWVSWNDWYOKVVYRDORWLCDWPJIDJGVMQTJPGPWZIJRIGTJOCZFKDRENRWGDIBHKZAKXRIKRIVVLXKTVOTPOROLFIVRMHVVVZGBDVGVZARHSCZVTVQSZGIVZEAUFHDMVUZZWPJIJJXIXHJKUVNVIZSFMWZIJIZOZBLFPVKZAKNVTDHEOLWDFKZAKNDEYJVIHIVOWDFKDREVQUOKVMHRMHUDIWZUVIFVNHJKHTDDCGBWJUXZQVMDCALTOLFIZZOKKCHGJVZOLFIRWCDEYLNDWYCEVXRDDQXHRIZFFHPFIKVMEVMWJULDDQYDVTGDJNLTDQKMRUPFKJUPXUPKWFBURKKPOHOOFFYHJVQUNHTMHKRUZOLEBJZQHJOKVZQXGLJCOVOWVMIIZTLZQTTVVLXVIFVVVVODFIUZNKUGITHXXTSNWYBEAHUWYZPFNWTJPDJQCZWKZUGVLINDJOKYZDEMHVMLEJQROQUNWVNHEJIKZHUJUKDKZVVKJDEYWYZPFNWTJPDJQUJXSGHUGHKOHINDJGOVZVJJRKOIWMUEISGXFKCHKJSKRHCQHCZWKZUJXRDKUZNHRWRLORWOKVORKVOLNDXZWYZWFKHZBKKGHKOHINFFHSIDVVVEF'
# cc = 3
# ccc = get_keyword(c, cc)
#
# d = 'DMIRYDTWVUDFUOWTCNPUQIMUYDSQHQWYPDYWNFBRXUXMRMFREUAKRYJCAIEDQEKPPVBLSQHQWYPDYWEYOPUJDMPMMKBZAZXEQRKCKCSHVEVXKLTSWZJPMHJDMYSNFYAARXBHQZQTKJIYPUVKLJIWVWBYDSEATYDBESMIZMMUNIENPULKTLDGEDWZPXCMYZMRCRXUYIDZSIUOIKLCHAATVIYDTOBRWDEHZVVKPIQJNIKLSYOKFGCHUDWKLCTIKNEOUYTAIJXCMJAKYXMBECGEOUSKHBLBCQDZVVGUQOOWWVGLYJONRCDJDMPPGDYOPVNSDYRMICGJOIIEIMVJDMSOQJIPCUOLJIZQUXMJBKWBPMHZKJJGGJXXQXMMCFWVZOQBYGMWYPTENMOHMDYJAKOYTJDMPGYDJALKYZUVNMVKLTHQVKRCYHKEEYNUHWBZYLIQJLJDYOYJKRVGVENVZKLEJBIIPPECOIEPPQDYQJMMIYHQTYLLQHTVIGIJDCJKEHEQXFPQCQHTKYUDIEVTVSTYJOGKJEQHBFKLTIWVAYQWQBMNWGBUOAFERXEBARXDHQJKZCAEJDMYSEXJAKYXMBECGZXBKIPZPGYIQHZVKBOFNMJOLJQNWLXBIQJNIKLSYOKFSLJUHPRNZUUJNFELTUZQEKLTYJBYOQQCAGVKPJXANZBQJSKUGERUHIWLCCMQOJLSJJQPAKKKVENLLXGLUNAZDWYDTMIYVEFAVVNYHUOMRBAXSAVKOPYDLICYYBJKBYOPUMAZVKJIEKBYOPUBAKKBMDYYATYKFQJQVCJYAAPVGJUJPXRMIQHZIENDQYNKYSJTJDMNYPBTONZBQJIAUZMMDTQKKYPSEIXRXWJXAVZXYDUHMTDPEDEKJCRKTAVKMYBBALJDCLUFWSCQJQNBVNYICWTCMMCFQBVBAECLIEIGDXEAXKPQWAPVQYLUEBKRCIQIMEKKUQOBYOZUQPTVCPUSKZUMMCFWVPKNFBADVBWI'
# dd = 7
# ddd = get_keyword(d, dd)
#
ee_cipher_text = 'HFNIMVOSNA'
ee_length = 6
og_word = "HELLOWORLD"

ee_func = get_keyword(ee_cipher_text, ee_length)
max_ = max(len(i) for i in ee_func)

ee_answer = "ABCXYZ"

ee_shift = [0, 1, 2, 23, 24, 25, 0, 1, 2, 23]
negative_shift = [-i for i in ee_shift]
