import numpy as np


def basic_test_cases():
    a = "\n".join([
        "000",
        "000",
        "000"
    ])  # test.assert_equals(path_finder(a), 0)

    b = "\n".join([
        "010",
        "010",
        "010"
    ])  # test.assert_equals(path_finder(b), 2)

    c = "\n".join([
        "010",
        "101",
        "010"
    ])  # test.assert_equals(path_finder(c), 4)

    d = "\n".join([
        "0707",
        "7070",
        "0707",
        "7070"
    ])  # test.assert_equals(path_finder(d), 42)

    e = "\n".join([
        "700000",
        "077770",
        "077770",
        "077770",
        "077770",
        "000007"
    ])  # test.assert_equals(path_finder(e), 14)

    f = "\n".join([
        "777000",
        "007000",
        "007000",
        "007000",
        "007000",
        "007777"
    ])  # test.assert_equals(path_finder(f), 0)

    g = "\n".join([
        "000000",
        "000000",
        "000000",
        "000010",
        "000109",
        "001010"
    ])  # test.assert_equals(path_finder(g), 4)

    return a, b, c, d, e, f, g


a, b, c, d, e, f, g = basic_test_cases()


def path_finder(area):
    b = area
    bs = [list(i) for i in area.split("\n")]
    bs_len = len(bs)

    arr = np.array(bs, dtype=int).reshape(bs_len, bs_len)
    arr_flat = list(arr.flatten())
    for i in range(bs_len, bs_len * bs_len, bs_len + 1):
        arr_flat.insert(i, '\n', )
    arr_flat = [str(i) for i in arr_flat]
    print(arr.shape)
    print(arr_flat)
    print("Get strings and answers from submit because I don't use AI to solve my code wars. :-)")
    # if np.sum(arr) == 0:
    #     return 0
    return arr_flat


aa = path_finder(a)
# print(f"a: 0\n{aa}\n{'*' * 72}")

bb = path_finder(b)
# print(f"b: 2\n{bb}\n{'*' * 72}")

cc = path_finder(c)
# print(f"c: 4\n{cc}\n{'*' * 72}")

dd = path_finder(d)
# print(f"d: 42\n{dd}\n{'*' * 72}")

ee = path_finder(e)
# print(f"e: 14\n{ee}\n{'*' * 72}")

ff = path_finder(f)
# print(f"f: 0\n{ff}\n{'*' * 72}")

gg = path_finder(g)
# print(f"g: 4\n{gg}\n{'*' * 72}")

h = ('9', 0)
i = ('00\n59', 9)
j = ('443\n622\n342', 2)
k = ('1748\n3363\n3280\n0941', 12)
l = ('09547\n18022\n16498\n35390\n91527', 17)
m = ('435299\n292595\n494834\n978378\n339644\n015652', 18)
n = ('3616870\n4431668\n4523080\n2748996\n8417245\n0953760\n9744257', 20)
o = ('75364185\n66365903\n81031340\n60071146\n32658917\n15612476\n03512461\n09121077', 22)
p = ('921512262\n073757004\n591992692\n711729536\n944738532\n740436140\n259226763\n624323214\n085117161', 32)
q = ('5736466929\n8422663712\n6717662320\n2050556352\n1208418537\n3846948554\n0736303096\n0737050025\n3835791347\n6062559101', 30)
r = ('45528081661\n88622773986\n17444154736\n11717290525\n47172210354\n09831904008\n60674793342\n56190958822\n80638279343\n55224665968\n60321088764', 24)
s = ('092158983775\n282369592936\n652460767036\n647041461643\n881083979874\n081990597155\n060078506934\n284703957557\n393772671318\n041581032822\n877612523318\n450481712521', 35)
t = ('4076390941965\n8838398866436\n1770111200297\n9369375707100\n7347601401344\n3969216683905\n8345069535192\n8051547548370\n1439668837856\n3993915787436\n4755139506265\n4431682647927\n7044750419779', 33)
u = ('26123923976121\n41230567257124\n56656453868372\n57264482617208\n59487358016952\n79957518597542\n00855390033477\n15756964394626\n62200210535437\n65717734838667\n62363952695719\n84397086821770\n18269568382152\n28766969660573', 37)
v = ('163524713265638\n671023336692281\n812486815651333\n427879130821023\n627519540045131\n225593570343566\n312238694164715\n579272481215212\n652886046544093\n694392047499170\n972056930148993\n764392039477627\n778566271863140\n219830938415775\n400463109825434', 43)
w = ('6193202055400530\n2978951088421870\n1728788075740422\n3493353571281571\n5883832600934582\n6764879319684399\n3951323591165362\n8924356397569809\n4337198721574525\n4300839837867718\n5973367290217580\n3615559832783305\n7060237376310028\n6227063147681060\n3808906527826590\n5026928259417646', 52)
x = ('91496021559669533\n81904367165372127\n76048945740163189\n97886868015673102\n47444790399445531\n76600261325220918\n86056540450767230\n75775683513771778\n15821885439235017\n36381134658388347\n02180477168680494\n29186437643013438\n75509140379701291\n02540851779711001\n66728206731789413\n59495725692790157\n98502239391643830', 133)